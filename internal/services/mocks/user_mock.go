// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/user.go -destination=internal/services/mocks/user_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/V1merX/litfak_poetry_bot/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetAllChatIDs mocks base method.
func (m *MockUserRepository) GetAllChatIDs(ctx context.Context) (*[]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChatIDs", ctx)
	ret0, _ := ret[0].(*[]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChatIDs indicates an expected call of GetAllChatIDs.
func (mr *MockUserRepositoryMockRecorder) GetAllChatIDs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChatIDs", reflect.TypeOf((*MockUserRepository)(nil).GetAllChatIDs), ctx)
}

// GetByTelegramID mocks base method.
func (m *MockUserRepository) GetByTelegramID(ctx context.Context, telegramID int64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTelegramID", ctx, telegramID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTelegramID indicates an expected call of GetByTelegramID.
func (mr *MockUserRepositoryMockRecorder) GetByTelegramID(ctx, telegramID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTelegramID", reflect.TypeOf((*MockUserRepository)(nil).GetByTelegramID), ctx, telegramID)
}

// GetByUserID mocks base method.
func (m *MockUserRepository) GetByUserID(ctx context.Context, userID int64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockUserRepositoryMockRecorder) GetByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockUserRepository)(nil).GetByUserID), ctx, userID)
}

// NewUser mocks base method.
func (m *MockUserRepository) NewUser(ctx context.Context, user *domain.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser.
func (mr *MockUserRepositoryMockRecorder) NewUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockUserRepository)(nil).NewUser), ctx, user)
}
